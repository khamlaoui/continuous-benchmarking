input {
   file {
    path => "/etc/logstash/logs/simulation.log"
    type => "gatling"
	start_position => beginning
  }  
  jmx {
    path => "/etc/logstash/conf.d/jmx"
    polling_frequency => 60
    type => "jmx"
  }
}


filter {
	if [type] == "jmx" {
	   if ("ProcessCpuLoad" in [metric_path] or "SystemCpuLoad" in [metric_path]) {
		 ruby {
		   code => "event['cpuLoad'] = event['metric_value_number'] * 100"
		 }
	   }
	   mutate {
               add_field => { "duration" => "0" }
       }
	}
	if [type] != "jmx" {
		if ([message] =~ "\bASSERTION\b" or [message] =~ "\bRUN\b" or [message] =~ "\bSTART\b" or [message] =~ "\bEND\b" or [message] =~ "\bGROUP\b") {
			drop { }
		}
		grok {
            match => { "message" => "%{DATA:scenario_name}\t%{NOTSPACE:scenario_id}\tREQUEST\t%{DATA:group}\t%{DATA:name}\t%{INT:requestStart:int}\t%{INT:requestEnd:int}\t%{INT:responseStart:int}\t%{INT:responseEnd:int}\t%{WORD:status}" }
            keep_empty_captures => true
        }
		mutate {
			gsub => [
					"status", "OK", true,
					"status", "KO", false
				]
			remove_field => ["host", "path"]
        }
        
        date {
            add_field => [ "time", "%{+MMM dd HH:mm:ss}" ]
			match => [ "%{@timestamp}", "ISO8601" ]
			timezone => "UTC"
        }
        ruby {
            code => "event['duration'] = event['responseEnd'] - event['requestStart']"
        }
		
	}
	mutate {
            convert => { "status" => "boolean" }
			convert => {"duration" => "integer"}
        }
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		index => "sample-bench-%{+YYYY.MM.dd}"
		codec => "json"
  	}
}
